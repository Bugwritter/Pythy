package pythy.execute;
import pythy.parser.*;
import java.io.*;




import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.io.FileWriter;

//放在Pythy/src/execute下面，编译的语句如下(如果你的命令行处于此文件夹)
/*
>>> javac Executer.java -classpath ../../class -d ../../class
*/


public class Executer {
    /***
     * 前三行是创建一个执行器时，会初始化的内容，由编译提供
     */
    public ArrayList<Statement_AST> statement_list;  //语句ast的列表，第0个没放东西，从第1个开始
    public FileWriter file_writer;          //输出哈希表信息到文件，暂时不用实现
    public FileWriter console_writer;  // 输出控制台信息，暂时不用实现
	public Environment env;
    //符号表等需要的属性 由执行部分来定义

    public int pc;          //当前进行到的表达式行号，初始化为1
    public boolean end;         //是否结束，初始化为False
    
    public Executer() throws IOException {
    	this.pc = 1;
		this.end = false;
		this.env = new Environment(); 
		File Console = new File(" files/Console.txt ");//这个文件用来装要输出到console的信息
		this.console_writer = new FileWriter(Console,true);//设定consoleWriter写Console.txt
 	}

    public void execute_once () throws IOException{
		Statement_AST ast_now = statement_list.get(pc);
		System.out.println("pc:" + pc);
    	try {
    		switch (ast_now.type) {
	    	case "=":
				env.put(ast_now.left,eval(ast_now.right));
				pc = ast_now.next;
	    		break;
	    	case "if":
	    	case "while":
	    	case "null"://if while null暂未实现
	    		break;
			}//end switch
				
    	}catch(PRTException e) {
    		this.console_writer.write("An error happens at line " + ast_now.line + ":\n" + e.errmsg + "\n");
			//System.out.println("An error happens at line " + ast_now.line + ":\n" + e.errmsg);
			this.end = true;
    	}
}
 //运行一行语句，按照pc来取语句，运行结束，计算出下一条指令的号码，并设置。
 //如果已经到了最后一句，应该设置end为True 

    public void execute_all() throws IOException{
		while(pc < statement_list.size()-1 && end == false) {
			execute_once();
		}

	}	
  //运行所有语句，循环跳出的条件应该是end为True

	//用来对表达式进行递归求值,返回封装好的值
    public Expression_AST eval(Expression_AST ast) throws PRTException{
		Expression_AST ret;//switch的不同case同属于一个块
		Expression_AST expLeft;
		Expression_AST expRight;
    	switch(ast.type) {
	    case "bool":	    
	    	ret = new Expression_AST("bool");
	        ret.value_boolean = ast.value_boolean;
	        return ret;
		    
	    case "int":	    
	    	ret= new Expression_AST("int");
	        ret.value_int = ast.value_int;
	        return ret;
	        	    
	    case "float":	    
	    	ret= new Expression_AST("float");
	        ret.value_float = ast.value_float;
	        return ret;
	       
	    case "name":	    
	        try
	        {
	            ret = env.get(ast.value_name);
	            return ret;
	        }catch(PRTException e) {
	            throw e;
	        }
		case "+":
		case "-":
		case "*":
		case "/":
			expLeft = eval(ast.left);
			expRight = eval(ast.right);
			if (expLeft.type == "int" && expRight.type == "int"){
				int result = operation(ast.type, expLeft.value_int, expRight.value_int);
				ret= new Expression_AST("int");
				ret.value_int = result;
				return ret;
			}
			float fresult = 0;
			if (expLeft.type == "int" && expRight.type == "float")
				fresult = operation(ast.type, expLeft.value_int, expRight.value_float);
			else if (expLeft.type == "float" && expRight.type == "int")
				fresult = operation(ast.type, expLeft.value_float, expRight.value_int);
			else if (expLeft.type == "float" && expRight.type == "float")
				fresult = operation(ast.type, expLeft.value_int, expRight.value_int);
			else if (expLeft.type == "bool" || expRight.type == "bool"){
				String op = "";
				switch(ast.type){
				case "+": op = "added";
				case "-": op = "subed";	
				case "*": op = "timed";
				case "/": op = "divided";
				}
				throw new PRTException(expLeft.type+" and "+expRight.type
					+ " can't be " + op);
			}
			ret= new Expression_AST("float");
			ret.value_float = fresult;
			return ret;
		case "and":
		case "or":
		case "not":
			expLeft = eval(ast.left);
			expRight = eval(ast.right);
			boolean leftBoolean, rightBoolean;
			switch (expLeft.type){
			case "bool": leftBoolean = expLeft.value_boolean; break;
			case "int": 
				if (expLeft.value_int == 0)
					leftBoolean = false;
				else
					leftBoolean = true;
				break;
			case "float":
				if (expLeft.value_float == 0.0)
					leftBoolean = false;
				else
					leftBoolean = true;
				break;
			default:
				leftBoolean = false;
				break;
			}
			switch (expRight.type){
			case "bool": rightBoolean = expRight.value_boolean; break;
			case "int": 
				if (expRight.value_int == 0)
					rightBoolean = false;
				else
					rightBoolean = true;
				break;
			case "float":
				if (expRight.value_float == 0.0)
					rightBoolean = false;
				else
					rightBoolean = true;
				break;
			default:
				rightBoolean = true;
				break;
			}
			String result = booleanOperation(ast.type, leftBoolean, rightBoolean);
			switch(result){
			case "true":
				ret= new Expression_AST("boolean");
				ret.value_boolean = true;
				return ret;
			case "false":
				ret= new Expression_AST("boolean");
				ret.value_boolean = false;
				return ret;
			case "left":
				return expLeft;
			case "right":
				return expRight;
			default:
				return null;
			}
		}
		return null;
	}
	
	public int operation(String op, int a, int b){
		switch(op){
		case"+": return a+b;
		case"-": return a-b;
		case"*": return a*b;
		case"/": return a/b;
		default: return 0;
		}
	}
	public float operation(String op, int a, float b){
		switch(op){
		case"+": return a+b;
		case"-": return a-b;
		case"*": return a*b;
		case"/": return a/b;
		default: return 0;
		}
	}
	public float operation(String op, float a, int b){
		switch(op){
		case"+": return a+b;
		case"-": return a-b;
		case"*": return a*b;
		case"/": return a/b;
		default: return 0;
		}
	}
	public float operation(String op, float a, float b){
		switch(op){
		case"+": return a+b;
		case"-": return a-b;
		case"*": return a*b;
		case"/": return a/b;
		default: return 0;
		}
	}
	
	public String booleanOperation(String op, boolean a, boolean b){
		switch (op){
		case "and":
			if(a == true && b == true)
				return "right";
			if(a == true && b == false)
				return "right";
			if(a == false && b == true)
				return "left";
			if(a == false && b == false)
				return "left";
		case "or":
			if(a == true && b == true)
				return "left";
			if(a == true && b == false)
				return "left";
			if(a == false && b == true)
				return "right";
			if(a == false && b == false)
				return "right";
		case "not":
			if(a == true)
				return "false";
			if(a == false)
				return "true";
		default:
			return "never reach";
		}
	}
	
    public void Reset() {}     //需要对执行器进行重启，就是恢复一开始的状态，重新设置一些属性
}