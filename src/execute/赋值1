int findHash(String left){
	hash = toHash(left);
	HashItem hashItem = new HashItem(hash);
	hashTable.put(hash, hashItem);
	return hash;
}

void eval(){
	switch(right.type){
		case 'name':
		nameHash = toHash(value_name);
		HashItem hashItem = hashTable.get(nameHash);
		hashTable.get(hash).type = hashItem.type;
		hashTable.get(hash).value = hashItem.value;
		break;
		case 'int': 
		hashTable.get(hash).type = 'int';
		hashTable.get(hash).value = value_int;
		break;
		case 'float': 
		hashTable.get(hash).type = 'float';
		hashTable.get(hash).value = value_float;
		break;
		case 'boolean':
		hashTable.get(hash).type = 'boolean';
		hashTable.get(hash).value = value_boolean;
		break;
		
		case '+','-','*','/':
		right.left.eval();
		right.right.eval();
		if(right.left.type == 'int'&& right.right.type == 'int'){
			hashTable.get(hash).type = 'int';
			int result = operation(right.type,
				right.left.value_int,right.right.value_int);
			hashTable.get(hash).value = result;
			break;
		}
		if(right.left.type == 'int'&& right.right.type == 'float'){
			hashTable.get(hash).type = 'float';
			float result = operation(right.type,
				right.left.value_int,right.right.value_float);
			hashTable.get(hash).value = result;
			break;
		}
		if(right.left.type == 'float'&& right.right.type == 'int'){
			hashTable.get(hash).type = 'float';
			float result = operation(right.type,
				right.left.value_float,right.right.value_int);
			hashTable.get(hash).value = result;
			break;
		}
		if(right.left.type == 'float'&& right.right.type == 'float'){
			hashTable.get(hash).type = 'float';
			float result = operation(right.type,
				right.left.value_float,right.right.value_float);
			hashTable.get(hash).value = result;
			break;
		}
		
		case 'and','or','not':
		right.left.eval();
		right.right.eval();
		hashTable.get(hash).type = 'boolean';
		boolean leftValue, rightValue;
		switch (right.left.type){
		case 'boolean': leftValue = right.left.value_boolean; break;
		case 'int': leftValue = right.left.value_int.toBoolean(); break;
		case 'float': leftValue = right.left.value_float.toBoolean(); break;
		}
		switch (right.right.type){
		case 'boolean': rightValue = right.right.value_boolean; break;
		case 'int': rightValue = right.right.value_int.toBoolean(); break;
		case 'float': rightValue = right.right.value_float.toBoolean(); break;
		}
		hashTable.get(hash).type = 'boolean';
		boolean result = Operation(right.type,
			leftValue, rightValue);
		hashTable.get(hash).value = result;
	}
	
	void execute(){
		findHash(left);
		if (right)
			right.eval();
	}